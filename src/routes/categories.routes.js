import { Router } from "express";
import Category from "../models/Category.js";

const router = Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     Category:
 *       type: object
 *       required:
 *         - name
 *         - createdAt
 *         - updatedAt
 *       properties:
 *         id:
 *           type: UUID
 *           description: The autogenerated id of the category
 *         name:
 *           type: string
 *           description: The name of the category
 *         createdAt:
 *           type: date
 *           description: Timestamp automatically created by Sequelize representing the category's moment of creation
 *         updatedAt:
 *           type: date
 *           description: Timestamp automatically created by Sequelize representing the category's latest update
 *       example:
 *         id: 55e26c8f-4f0e-42d2-b096-71f856f5a3ed
 *         name: Cars  
 *         updatedAt: 2022-08-28T21:43:51.000Z
 *         createdAt: 2022-08-28T21:43:51.000Z 
 */

/**
 * @swagger
 * tags:
 *   name: Categories
 *   description: The categories managing API 
 */

/**
 * @swagger
 * /categories:
 *   get:
 *     summary: Returns the list of all the categories
 *     tags: [Categories]
 *     responses:
 *       200:
 *         description: The list of the categories
 *         content:     
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Category' 
 */


router.get('/', async (req, res) => {
    try {
        const allCategories = await Category.findAll();
        return res.json(allCategories);
    } catch (error) {
        console.error(error);
    }
});


/**
 * @swagger
 * /categories/{id}:
 *    get:
 *       summary: Get the category by id and the products belonging to it
 *       tags: [Categories]
 *       parameters:
 *         - in: path
 *           name: id 
 *           schema:
 *             type: string
 *           required: true
 *           description: The category's id.
 *       responses:
 *         200:
 *           description: The category description by id and it's products
 *           content:
 *             application/json:
 *               schema:
 *                 $ref: '#/components/schemas/Category'
 *         404:
 *           description: The category was not found.             
 */


router.get('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const foundCategory = await Category.findByPk(id, { include: ["products"] });

        !foundCategory && res.status(404).json({ error: `There are no Categories with the id : ${id}` });

        return res.json(foundCategory);

    } catch (error) {
        console.error(error)
    }
});


/**
 * @swagger
 * /categories:
 *  post:
 *    summary: Create a new category
 *    tags: [Categories]
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/Category'
 *    responses:
 *      201:
 *        description: The category was successfully created
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Category'
 *      400:
 *        description: All fields must be filled to create the category
 *      405:
 *        description: Can not create the category with that name.    
 *      500:
 *        description: Something on the server went wrong. 
 */

router.post('/', async (req, res) => {
    const { name } = req.body;

    try {

        const categoryWithSameName = await Category.findOne({
            where: {
                name: name
            }
        });

        if (!name) return res.status(400).json({ error: "Must provide all the required fields" });

        categoryWithSameName && res.status(405).json({ error: `There's already a category with that name` });

        const newCategory = await Category.create({ name });
        return res.status(201).json(newCategory);
    } catch (error) {
        console.error(error)
    }
});


/**
 * @swagger
 * /categories/{id}:
 *  put:
 *    summary: Modify a category
 *    tags: [Categories]
 *    parameters:
 *      - in: path
 *        name: id 
 *        schema:
 *          type: string
 *        required: true
 *        description: The category's id
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/Category'
 *    responses:
 *      200:
 *        description: The category was succesfully updated
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Category'
 *      404:
 *        description: The category was not found.    
 *      500:
 *        description: Something on the server went wrong. * 
 */


router.put('/:id', async (req, res) => {
    const { id } = req.params;
    const { body } = req;
    try {
        const foundCategory = await Category.findByPk(id);

        !foundCategory && res.status(404).json({ error: `There are no Categories with the id : ${id}` });

        await Category.update(body, { where: { id: id } });
        const updatedCategory = await Category.findByPk(id);

        return res.json(updatedCategory);
    } catch (error) {
        console.error(error)
    }
});

/**
 * @swagger
 * /categories/{id}:
 *   delete:
 *     summary: Delete a category
 *     tags: [Categories]
 *     parameters:
 *       - in: path
 *         name: id 
 *         schema:
 *           type: string
 *         required: true
 *         description: The category's id
 *     responses:
 *       200:
 *         description: The category was successfully deleted.
 *       404:
 *         description: The category was not found.
 *       500:
 *         description: Something on the server went wrong. *             
 */


router.delete('/:id', async (req, res) => {

    const { id } = req.params;
    try {
        const foundCategory = await Category.findByPk(id);

        !foundCategory && res.status(404).json({ error: `There are no categories with the id : ${id}` });

        await Category.destroy({ where: { id: id } });

        return res.json({ msg: `Category ${foundCategory.name} - id : ${id} deleted` });

    } catch (err) {
        console.log(err)
    }

});

export default router;