import { Router } from "express";
import { getProducts, getProductById, postProduct, modifyProduct, deleteProduct } from "../controllers/routes/products.controllers.js";

const router = Router();


/**
 * @swagger
 * components:
 *   schemas:
 *     Product:
 *       type: object
 *       required:
 *         - name
 *         - image
 *         - description
 *         - price
 *         - category
 *       properties:
 *         id:
 *           type: UUID
 *           description: The autogenerated id of the product
 *         name:
 *           type: string
 *           description: The name of the product
 *         image:
 *           type: string
 *           description: The URL of the product's image
 *         description:
 *           type: string
 *           description: The product's details
 *         price:
 *           type: integer
 *           description: The product's price 
 *         category:
 *           type: object
 *           description: The referenced instance of the Category model 
 *       example:
 *         id: 1f562c5e-ce4e-4a26-a62b-011095cb5b97
 *         name: Clio V
 *         image: https://paultan.org/image/2019/01/2019-Renault-Clio-V-18-e1548815807593-1200x661.jpg
 *         description: Clio V
 *         price: 150000
 *         createdAt: 2022-08-28T00:57:21.248Z
 *         updatedAt: 2022-08-28T00:57:21.248Z
 *         category: Category Object
 */

/**
 * @swagger
 * tags:
 *   name: Products
 *   description: The products managing API 
 */

/**
 * @swagger
 * /products:
 *   get:
 *     summary: Returns the list of all the products
 *     tags: [Products]
 *     responses:
 *       200:
 *         description: The list of the products
 *         content:     
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Product' 
 *       204:
 *         description : There are no products loaded in the database.  
 */

router.get('/', getProducts);

/**
 * @swagger
 * /products/{id}:
 *    get:
 *       summary: Get the product by id
 *       tags: [Products]
 *       parameters:
 *         - in: path
 *           name: id 
 *           schema:
 *             type: string
 *           required: true
 *           description: The product's id.
 *       responses:
 *         200:
 *           description: The product description by id.
 *           content:
 *             application/json:
 *               schema:
 *                 $ref: '#/components/schemas/Product'
 *         204:
 *           description: The product was not found.             
 */

router.get('/:id', getProductById);



/**
 * @swagger
 * /products:
 *  post:
 *    summary: Create a new product
 *    tags: [Products]
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/Product'
 *    responses:
 *      201:
 *        description: The product was successfully created
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Product'
 *      400:
 *        description: All fields must be filled to create the product
 *      405:
 *        description: Can not create the product with that name.    
 *      500:
 *        description: Something on the server went wrong. * 
 */


router.post('/', postProduct);


/**
 * @swagger
 * /products/{id}:
 *  put:
 *    summary: Modify a product
 *    tags: [Products]
 *    parameters:
 *      - in: path
 *        name: id 
 *        schema:
 *          type: string
 *        required: true
 *        description: The product's id
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/Product'
 *    responses:
 *      200:
 *        description: The product was succesfully updated
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Product'
 *      204:
 *        description: The product was not found.    
 *      500:
 *        description: Something on the server went wrong. * 
 */


router.put('/:id', modifyProduct);


/**
 * @swagger
 * /products/{id}:
 *   delete:
 *     summary: Delete a product
 *     tags: [Products]
 *     parameters:
 *       - in: path
 *         name: id 
 *         schema:
 *           type: string
 *         required: true
 *         description: The product's id
 *     responses:
 *       200:
 *         description: The product was successfully deleted.
 *       204:
 *         description: The product was not found.
 *       500:
 *         description: Something on the server went wrong. *             
 */


router.delete('/:id', deleteProduct);

export default router;